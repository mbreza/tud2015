package service;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import domain.Car;
import domain.Emp;

public class EmpManager {

	private Connection connection;

	private String url = "jdbc:hsqldb:hsql://localhost/workdb";
		
	private String createTableEmp = "create table pracownik (id_pracownik bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, imie varchar(20), nazwisko varchar(20), stanowisko varchar(20), pesel int, pensja int)";
	
	
	private PreparedStatement addEmpStmt;
	private PreparedStatement deleteAllEmpStmt;
	private PreparedStatement getAllEmpStmt;
	private PreparedStatement updateEmpStmt;
	private PreparedStatement deleteEmpStmt;
	private PreparedStatement getEmpStmt;
	private PreparedStatement getEmpbyNameStmt;
	private PreparedStatement getEmpbyLastNameStmt;
	private PreparedStatement getEmpbyStanowiskoStmt;
	
	private Statement statement;
	
	public EmpManager() {
		try {
			connection = DriverManager.getConnection(url);
			

		} catch (SQLException e) {
			e.printStackTrace();
		}



		try {
			connection = DriverManager.getConnection(url);
			statement = connection.createStatement();

			ResultSet rs = connection.getMetaData().getTables(null, null, null,
					null);
			boolean tableExists = false;
			while (rs.next()) {
				if ("pracownik".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
					tableExists = true;
					break;
				}
			}

			if (!tableExists)
				statement.executeUpdate(createTableEmp);

			addEmpStmt = connection
					.prepareStatement("INSERT INTO pracownik (imie, nazwisko, stanowisko, pesel, pensja) VALUES (?, ?, ?, ?, ?)");
			deleteAllEmpStmt = connection
					.prepareStatement("DELETE FROM pracownik");
		getAllEmpStmt = connection
					.prepareStatement("SELECT id_pracownik, imie, nazwisko, stanowisko, pesel, pensja FROM pracownik");

		updateEmpStmt = connection.prepareStatement("UPDATE pracownik SET imie = ?, nazwisko = ?, stanowisko = ?,  pesel = ?, pensja =?  WHERE id_pracownik = ?");
		
		deleteEmpStmt = connection.prepareStatement("DELETE FROM pracownik WHERE id_pracownik = ?");
		
		getEmpStmt = connection.prepareStatement("SELECT * FROM pracownik WHERE id_pracownik= ?");
		
		getEmpbyNameStmt = connection.prepareStatement("SELECT * FROM pracownik WHERE imie= ?");
		
		getEmpbyLastNameStmt = connection.prepareStatement("SELECT * FROM pracownik WHERE nazwisko= ?");
		
		getEmpbyStanowiskoStmt = connection.prepareStatement("SELECT * FROM pracownik WHERE stanowisko= ?");
		
		} catch (SQLException e) {
			e.printStackTrace();
		}
	
	}
	
	 Connection getConnection() {
		return connection;
	}	
	
		void clearEmp() {
			try {
				deleteAllEmpStmt.executeUpdate();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		
		public int addEmp(Emp emp) {
			int count = 0;
			try {
				//addSamochodStmt.setInt(1, car.getId_samochod());
				addEmpStmt.setString(1, emp.getImie());
				addEmpStmt.setString(2, emp.getNazwisko());
				addEmpStmt.setString(3, emp.getStanowisko());
				addEmpStmt.setInt(4, emp.getPesel());
				addEmpStmt.setInt(5, emp.getPensja());
				count = addEmpStmt.executeUpdate();

			} catch (SQLException e) {
				e.printStackTrace();
			}
			return count;
		}

		public List<Emp> getAllEmp() {
			List<Emp> emp = new ArrayList<Emp>();

			try {
				ResultSet rs = getAllEmpStmt.executeQuery();

				while (rs.next()) {
					Emp p = new Emp();
					p.setId_pracownik(rs.getInt("id_pracownik"));
					p.setImie(rs.getString("imie"));
					p.setNazwisko(rs.getString("nazwisko"));
					p.setStanowisko(rs.getString("stanowisko"));
					p.setPesel(rs.getInt("pesel"));
					p.setPensja(rs.getInt("pensja"));
					emp.add(p);
				}

			} catch (SQLException e) {
				e.printStackTrace();
			}
			return emp;
		}
	 
		 public int updateEmp(Emp emp)
		    {
		        int count = 0;
		        try
		        {
		        	updateEmpStmt.setString(1, emp.getImie());
		        	updateEmpStmt.setString(2, emp.getNazwisko());
		        	updateEmpStmt.setString(3, emp.getStanowisko());
		        	updateEmpStmt.setInt(4, emp.getPesel());
		        	updateEmpStmt.setInt(5, emp.getPensja());
		        	updateEmpStmt.setInt(6, emp.getId_pracownik());
		        	
		            count = updateEmpStmt.executeUpdate();

		        }
		        catch (SQLException e)
		        {
		            e.printStackTrace();
		        }
		        return count;
		    }
		
		 
		    public int deleteEmp(Emp emp)
		    {
		        int count = 0;
		        try
		        {
		            deleteEmpStmt.setInt(1, emp.getId_pracownik());
		            count = deleteEmpStmt.executeUpdate();
		        }
		        catch (SQLException e)
		        {
		            e.printStackTrace();
		        }

		        return count;
		    }
		    
		    public Emp getEmp(Emp emp)
		    {
		        try
		        {
		            getEmpStmt.setInt(1, emp.getId_pracownik());
		            ResultSet rs = getEmpStmt.executeQuery();

		            while (rs.next())
		            {
		                emp = new Emp(rs.getString("imie"), rs.getString("nazwisko"), rs.getString("stanowisko"),rs.getInt("pesel"),rs.getInt("pensja"));		              
		                
		                emp.setId_pracownik(rs.getInt("id_pracownik"));
		                return emp;
		            }
		        }
		        catch (SQLException e)
		        {
		            e.printStackTrace();
		        }

		        return null;
		    }

		    public List<Emp> getEmpByName(Emp emp) {
		    	List<Emp> emps = new ArrayList<Emp>();
		    	try {
		    	getEmpbyNameStmt.setString(1, emp.getImie());
		    	ResultSet rs = getEmpbyNameStmt.executeQuery();
		    	while (rs.next()) {
		    	Emp e = new Emp();
		    	e.setId_pracownik(rs.getInt("id_pracownik"));
		    	e.setImie(rs.getString("imie"));
		    	e.setNazwisko(rs.getString("nazwisko"));
		    	e.setStanowisko(rs.getString("stanowisko"));
		    	e.setPesel(rs.getInt("pesel"));
		    	emps.add(e);
		    	}
		    	} catch (SQLException e) {
		    	e.printStackTrace();
		    	}
		    	return emps;
		    	}
		    
		    
		    public List<Emp> getEmpByLastName(Emp emp) {
		    	List<Emp> emps = new ArrayList<Emp>();
		    	try {
		    	getEmpbyLastNameStmt.setString(1, emp.getNazwisko());
		    	ResultSet rs = getEmpbyLastNameStmt.executeQuery();
		    	while (rs.next()) {
		    	Emp e = new Emp();
		    	e.setId_pracownik(rs.getInt("id_pracownik"));
		    	e.setImie(rs.getString("imie"));
		    	e.setNazwisko(rs.getString("nazwisko"));
		    	e.setStanowisko(rs.getString("stanowisko"));
		    	e.setPesel(rs.getInt("pesel"));
		    	emps.add(e);
		    	}
		    	} catch (SQLException e) {
		    	e.printStackTrace();
		    	}
		    	return emps;
		    	}
		    
		    public List<Emp> getEmpByStanowisko(Emp emp) {
		    	List<Emp> emps = new ArrayList<Emp>();
		    	try {
		    	getEmpbyStanowiskoStmt.setString(1, emp.getStanowisko());
		    	ResultSet rs = getEmpbyStanowiskoStmt.executeQuery();
		    	while (rs.next()) {
		    	Emp e = new Emp();
		    	e.setId_pracownik(rs.getInt("id_pracownik"));
		    	e.setImie(rs.getString("imie"));
		    	e.setNazwisko(rs.getString("nazwisko"));
		    	e.setStanowisko(rs.getString("stanowisko"));
		    	e.setPesel(rs.getInt("pesel"));
		    	emps.add(e);
		    	}
		    	} catch (SQLException e) {
		    	e.printStackTrace();
		    	}
		    	return emps;
		    	}
		    	

}
