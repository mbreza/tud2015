package service;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import domain.Rent;
import domain.Car;
import domain.Emp;

public class RentManager {

	private Connection connection;

    private String url = "jdbc:hsqldb:hsql://localhost/workdb";

    private String createTableRent = "CREATE TABLE wypozyczenie (id_wypozyczenie bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, idreff_samochod int, idreff_pracownik int, data_wypozyczenia varchar(20), ilosc_dni int, oplata int)";
    
    private String addCarFK = "ALTER TABLE wypozyczenie ADD CONSTRAINT ab FOREIGN KEY (idreff_samochod) REFERENCES Samochod (id_samochod)";
    private String addEmpFK = "ALTER TABLE wypozyczenie ADD CONSTRAINT ba FOREIGN KEY (idreff_pracownik) REFERENCES pracownik (id_pracownik)";

    private PreparedStatement addRentStmt;             
    private PreparedStatement updateRentStmt;
    private PreparedStatement deleteRentById_wStmt;
    private PreparedStatement deleteRentById_sStmt;
    private PreparedStatement deleteRentById_pStmt;
    private PreparedStatement getRentById_wStmt;
    private PreparedStatement getRentById_sStmt;
    private PreparedStatement getRentById_pStmt;

    private PreparedStatement deleteAllRentStmt;
    private PreparedStatement getAllRentStmt;

    private Statement statement;

    public RentManager()
    {
        try
        {
            connection = DriverManager.getConnection(url);
            statement = connection.createStatement();

            ResultSet rs = connection.getMetaData().getTables(null, null, null, null);

            boolean tableExists = false;

            while (rs.next()) {
                if ("wypozyczenie".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
                    tableExists = true;
                    break;
                }
            }

            if (!tableExists)
            {
                statement.executeUpdate(createTableRent);
                statement.executeUpdate(addEmpFK);
                statement.executeUpdate(addCarFK);
            }


            addRentStmt = connection.prepareStatement("INSERT INTO wypozyczenie (id_wypozyczenie, idreff_samochod, idreff_pracownik, data_wypozyczenia, ilosc_dni, oplata) VALUES (?, ?, ?, ?, ?, ?)");
            updateRentStmt = connection.prepareStatement("UPDATE wypozyczenie SET  idreff_samochod = ?, idreff_pracownik = ?, data_wypozyczenia = ?, ilosc_dni = ?, oplata = ? WHERE id_wypozyczenie = ?");

            deleteRentById_wStmt = connection.prepareStatement("DELETE FROM wypozyczenie WHERE id_wypozyczenie = ?");
            deleteRentById_sStmt = connection.prepareStatement("DELETE FROM wypozyczenie WHERE idreff_samochod = ?");
            deleteRentById_pStmt = connection.prepareStatement("DELETE FROM wypozyczenie WHERE idreff_pracownik = ?");

            getRentById_wStmt = connection.prepareStatement("SELECT * FROM wypozyczenie WHERE id_wypozyczenie = ?");
            getRentById_sStmt = connection.prepareStatement("SELECT * FROM wypozyczenie WHERE idreff_samochod = ?");
            getRentById_pStmt = connection.prepareStatement("SELECT * FROM wypozyczenie WHERE idreff_pracownik = ?");


            deleteAllRentStmt = connection.prepareStatement("DELETE FROM wypozyczenie");
            getAllRentStmt = connection.prepareStatement("SELECT * FROM wypozyczenie");

        }
        catch (SQLException e)
        {
            e.printStackTrace();
        }
    }
    
    Connection getConnection() {
        return connection;
    }

    void clearRent() {
        try {
            deleteAllRentStmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
 
    public int addRent(Rent rent) {
        int count = 0;
        try {
        	
        	
            addRentStmt.setInt(1, rent.getId_wypozyczenie());
            addRentStmt.setInt(2, rent.getIdreff_samochod());
            addRentStmt.setInt(3, rent.getIdreff_pracownik());
            addRentStmt.setString(4, rent.getData_wypozyczenia());
            addRentStmt.setInt(5, rent.getIlosc_dni());
            addRentStmt.setInt(6, rent.getOplata());

            count = addRentStmt.executeUpdate();

        } catch (SQLException e) {
            e.printStackTrace();
        }
        return count;
    }
    
    public int updateRent(Rent rent)
    {
        int count = 0;
        try
        {
        	 
        	 updateRentStmt.setInt(1, rent.getIdreff_samochod());
        	 updateRentStmt.setInt(2, rent.getIdreff_pracownik());
        	 updateRentStmt.setString(3, rent.getData_wypozyczenia());
        	 updateRentStmt.setInt(4, rent.getIlosc_dni());
        	 updateRentStmt.setInt(5, rent.getOplata());
        	 updateRentStmt.setInt(6, rent.getId_wypozyczenie());
        	 
            count = updateRentStmt.executeUpdate();

        }
        catch (SQLException e)
        {
            e.printStackTrace();
        }
        return count;
    }
    
    
    public int deleteRentIdw(Rent rent)
    {
        int count = 0;
        try
        {
        	deleteRentById_wStmt.setInt(1, rent.getId_wypozyczenie());
            count = deleteRentById_wStmt.executeUpdate();
        }
        catch (SQLException e)
        {
            e.printStackTrace();
        }

        return count;
    }
    
    public void deleteRentIds(Car car)
    {
        int count = 0;

        try
        {
        	deleteRentById_sStmt.setInt(1, car.getId_samochod());

            count = deleteRentById_sStmt.executeUpdate();
        }
        catch (SQLException e)
        {
            e.printStackTrace();
        }
    }
    
    
    public void deleteRentIdp(Emp emp)
    {
        int count = 0;

        try
        {
        	deleteRentById_pStmt.setInt(1, emp.getId_pracownik());

            count = deleteRentById_pStmt.executeUpdate();
        }
        catch (SQLException e)
        {
            e.printStackTrace();
        }
    }
    
    
    public Rent getRentIdw(Rent rent)
    {
        try
        {
        	getRentById_wStmt.setInt(1, rent.getId_wypozyczenie());
            ResultSet rs = getRentById_wStmt.executeQuery();

            while (rs.next())
            {
            	
                rent = new Rent(rs.getInt("idreff_samochod"), rs.getInt("idreff_pracownik"), rs.getString("data_wypozyczenia"),rs.getInt("ilosc_dni"),rs.getInt("oplata"));
                rent.setId_wypozyczenie(rs.getInt("id_wypozyczenie"));
                return rent;
            }
        }
        catch (SQLException e)
        {
            e.printStackTrace();
        }

        return null;
    }
    
    public List<Rent> getRentbyIdp(Emp emp) {
        List<Rent> rents = new ArrayList<Rent>();

        try {

        	getRentById_pStmt.setInt(1, emp.getId_pracownik());
            ResultSet rs = getRentById_pStmt.executeQuery();

            while (rs.next())
            {
                Rent e = new Rent();
                e.setId_wypozyczenie(rs.getInt("id_wypozyczenie"));
                e.setIdreff_samochod(rs.getInt("idreff_samochod"));
                e.setIdreff_pracownik(rs.getInt("idreff_pracownik"));
                e.setData_wypozyczenia(rs.getString("data_wypozyczenia"));
                e.setIlosc_dni(rs.getInt("ilosc_dni"));
                e.setOplata(rs.getInt("oplata"));
                rents.add(e);
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }
        return rents;
    }
    
   
    public List<Rent> getRentbyIds(Car car) {
        List<Rent> rents = new ArrayList<Rent>();

        try {

        	 getRentById_sStmt.setInt(1, car.getId_samochod());
            ResultSet rs =  getRentById_sStmt.executeQuery();

            while (rs.next())
            {
                Rent e = new Rent();
                e.setId_wypozyczenie(rs.getInt("id_wypozyczenie"));
                e.setIdreff_samochod(rs.getInt("idreff_samochod"));
                e.setIdreff_pracownik(rs.getInt("idreff_pracownik"));
                e.setData_wypozyczenia(rs.getString("data_wypozyczenia"));
                e.setIlosc_dni(rs.getInt("ilosc_dni"));
                e.setOplata(rs.getInt("oplata"));
                rents.add(e);
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }
        return rents;
    }
    
    public List<Rent> getAllRent() {
        List<Rent> rents = new ArrayList<Rent>();

        try {
            ResultSet rs = getAllRentStmt.executeQuery();

            while (rs.next()) {
                Rent e = new Rent();
                e.setId_wypozyczenie(rs.getInt("id_wypozyczenie"));
                e.setIdreff_samochod(rs.getInt("idreff_samochod"));
                e.setIdreff_pracownik(rs.getInt("idreff_pracownik"));
                e.setData_wypozyczenia(rs.getString("data_wypozyczenia"));
                e.setIlosc_dni(rs.getInt("ilosc_dni"));
                e.setOplata(rs.getInt("oplata"));
                rents.add(e);
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }
        return rents;
    }
    
}
